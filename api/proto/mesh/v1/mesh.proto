syntax = "proto3";

package redbco.redbopen.mesh.v1;

option go_package = "github.com/redbco/redb-open/api/proto/mesh/v1;meshv1";

import "google/protobuf/empty.proto";

// MeshService - Control plane operations and status
service MeshService {
  // Mesh lifecycle
  rpc SeedMesh(SeedMeshReq) returns (MeshStatus);
  rpc JoinMesh(JoinMeshReq) returns (MeshStatus);
  rpc StartMesh(StartMeshReq) returns (MeshStatus);
  rpc StopMesh(StopMeshReq) returns (MeshStatus);
  rpc LeaveMesh(LeaveMeshReq) returns (SuccessStatus);
  rpc EvictNode(EvictNodeReq) returns (MeshStatus);
  
  // Topology management
  rpc AddLink(AddLinkReq) returns (TopologyStatus);
  rpc DropLink(DropLinkReq) returns (TopologyStatus);
  rpc EstablishFullLinks(EstablishFullLinksReq) returns (TopologyStatus);
  
  // Data publishing
  rpc SendNodeUpdate(NodeUpdate) returns (BroadcastResult);
  rpc SendMeshUpdate(MeshUpdate) returns (BroadcastResult);
  rpc SendInternalDBUpdate(DBUpdate) returns (BroadcastResult);
  
  // Client data streams
  rpc OpenClientDataStream(OpenClientDataStreamReq) returns (StreamHandle);
  rpc CloseClientDataStream(StreamHandle) returns (google.protobuf.Empty);
  rpc PublishClientData(Chunk) returns (PublishResult);
  
  // Status and monitoring
  rpc GetMeshStatus(google.protobuf.Empty) returns (MeshStatus);
  rpc WatchMeshEvents(Filter) returns (stream MeshEvent);
}

// MeshDataService - Data plane subscriptions (server-side streams)
service MeshDataService {
  rpc SubscribeNodeUpdates(SubscribeReq) returns (stream NodeUpdate);
  rpc SubscribeMeshUpdates(SubscribeReq) returns (stream MeshUpdate);
  rpc SubscribeInternalDBUpdates(SubscribeReq) returns (stream DBUpdate);
  rpc SubscribeClientData(StreamSelector) returns (stream ClientData);
}

// Mesh lifecycle requests
message SeedMeshReq {
  string mesh_name = 1;
  string mesh_description = 2;
  bool allow_join = 3;
}

message JoinMeshReq {
  string mesh_id = 1;
  string node_name = 2;
  string node_description = 3;
  repeated string peer_endpoints = 4;
}

message StartMeshReq {
  string mesh_id = 1;
  string node_id = 2;
  map<string, string> config_overrides = 3;
}

message StopMeshReq {
  string mesh_id = 1;
  string node_id = 2;
}

message LeaveMeshReq {
  string mesh_id = 1;
  string node_id = 2;
}

message EvictNodeReq {
  string mesh_id = 1;
  string target_node_id = 2;
  string reason = 3;
}

// Topology management
message AddLinkReq {
  string mesh_id = 1;
  string source_node_id = 2;
  string target_node_id = 3;
  int32 latency_ms = 4;
  int32 bandwidth_mbps = 5;
  int32 cost = 6;
}

message DropLinkReq {
  string mesh_id = 1;
  string source_node_id = 2;
  string target_node_id = 3;
}

message EstablishFullLinksReq {
  string mesh_id = 1;
}

// Data publishing
message NodeUpdate {
  string node_id = 1;
  string mesh_id = 2;
  map<string, string> metadata = 3;
  int64 timestamp = 4;
  bytes signature = 5;
}

message MeshUpdate {
  string mesh_id = 1;
  string update_type = 2;
  bytes payload = 3;
  int64 timestamp = 4;
  bytes signature = 5;
}

message DBUpdate {
  string update_id = 1;
  string table_name = 2;
  string operation = 3;
  bytes data = 4;
  int64 timestamp = 5;
  bytes signature = 6;
}

// Client data streams
message OpenClientDataStreamReq {
  string tenant_id = 1;
  repeated string target_nodes = 2;
  string qos = 3;
  int32 priority = 4;
  map<string, string> metadata = 5;
}

message StreamHandle {
  string stream_id = 1;
  string tenant_id = 2;
  repeated string target_nodes = 3;
  string status = 4;
  int64 created_at = 5;
}

message Chunk {
  string stream_id = 1;
  int64 seq = 2;
  int32 chunk_seq = 3;
  int32 total_chunks = 4;
  string tenant_id = 5;
  bytes payload = 6;
  bytes checksum = 7;
  map<string, string> headers = 8;
}

// Status and monitoring
message MeshStatus {
  string mesh_id = 1;
  string mesh_name = 2;
  repeated NodeInfo nodes = 3;
  repeated LinkInfo links = 4;
  int64 lsdb_version = 5;
  repeated RaftGroupInfo raft_groups = 6;
  string status = 7;
  int64 last_updated = 8;
}

message NodeInfo {
  string node_id = 1;
  string node_name = 2;
  string status = 3;
  string platform = 4;
  string version = 5;
  string region_id = 6;
  string ip_address = 7;
  int32 port = 8;
  int64 last_seen = 9;
  map<string, string> metadata = 10;
}

message LinkInfo {
  string link_id = 1;
  string source_node_id = 2;
  string target_node_id = 3;
  int32 latency_ms = 4;
  int32 bandwidth_mbps = 5;
  int32 loss = 6;
  int32 utilization = 7;
  string status = 8;
  map<string, string> metadata = 9;
}

message RaftGroupInfo {
  string group_id = 1;
  string group_type = 2;
  repeated string members = 3;
  int64 term = 4;
  string leader_id = 5;
  string status = 6;
}

message TopologyStatus {
  bool success = 1;
  string error = 2;
  repeated LinkInfo links = 3;
}

message BroadcastResult {
  bool success = 1;
  string error = 2;
  int64 message_id = 3;
  repeated string failed_nodes = 4;
}

message PublishResult {
  bool success = 1;
  string error = 2;
  int64 message_id = 3;
  repeated string failed_nodes = 4;
}

message SuccessStatus {
  bool success = 1;
  string error = 2;
}

// Data plane messages
message ClientData {
  string stream_id = 1;
  int64 seq = 2;
  string tenant_id = 3;
  bytes payload = 4;
  map<string, string> headers = 5;
  int64 timestamp = 6;
}

// Subscription and filtering
message SubscribeReq {
  string tenant_id = 1;
  repeated string filters = 2;
}

message StreamSelector {
  string tenant_id = 1;
  repeated string stream_ids = 2;
  repeated string node_ids = 3;
}

message Filter {
  string type = 1;
  repeated string values = 2;
}

// Events
message MeshEvent {
  string event_id = 1;
  string event_type = 2;
  int64 timestamp = 3;
  bytes payload = 4;
  map<string, string> metadata = 5;
}